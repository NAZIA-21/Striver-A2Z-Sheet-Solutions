//TC : O(log m + log n)
//SC : O(1)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowIdx = searchRow(matrix , target);
        if(rowIdx != -1) 
           return searchTarget(rowIdx , matrix, target);
        else
            return false;    
    }

    //finding row index
    private int searchRow(int[][] matrix , int target){
        int low = 0;
        int high = matrix.length - 1;

        while(low <= high){
            int mid = (low + high)/2;

            if(matrix[mid][0] <= target && matrix[mid][matrix[0].length -1] >= target){
                return mid;
            } else if(matrix[mid][0] > target){
                high = mid - 1;
            } else if(matrix[mid][0] < target){
                low = mid + 1;
            }
        }
        return -1;
    }

    private boolean searchTarget(int rowIdx , int[][] matrix , int target){
        int low = 0; 
        int high = matrix[rowIdx].length;

        while(low <= high){
            int mid = (low + high)/2;

            if(matrix[rowIdx][mid] == target) return true;

            else if(matrix[rowIdx][mid] > target) high = mid -1;

            else if(matrix[rowIdx][mid] < target) low = mid + 1;
        }
        return false;
    }
}
