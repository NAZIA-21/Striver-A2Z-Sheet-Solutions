//Approach 1: Merge and sort
//TC : O((n + m) * log(n + m))
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1= nums1.length;
        int n2= nums2.length;

        int[] merged = new int[n1+n2];
        int k=0;

        for(int i=0; i< n1; i++){
            merged[k] = nums1[i];
            k++;
        }

        for(int j=0; j< n2; j++){
            merged[k] = nums2[j];
            k++;
        }

        Arrays.sort(merged);

        int m= merged.length;

        if(m %2 == 1){
            //odd no. of elemnts
            return (double) merged[ m/2];
        } else{
            //even no. of elemnts
            return (double) (merged[ m/2] + merged[ m/2 -1])/2;
        }    
    }
}

//Approach 2 : Two-Pointer Method
//TC : O(n + m)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1= nums1.length;
        int n2= nums2.length;

        int i=0, j=0, m1=0, m2=0;
        for(int cnt=0; cnt <= (n1+n2)/2; cnt++){
            m2 = m1;
            if(i != n1 && j != n2){
                if(nums1[i] > nums2[j]){
                    m1 = nums2[j++];
                }else{
                    m1 = nums1[i++];
                }
            } else if(i < n1){
                m1 = nums1[i++];
            } else{
                m1 = nums2[j++];
            }
        }

        if((n1+n2) % 2 == 1){
            //odd length
            return (double)m1;
        }else{
            //even length
            return (double) (m1+m2)/2.0;
        }
        
    }
}
