//Iterative Approach
//TC: O(n.2^n)
//SC: O(n.2^n)
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> outer = new ArrayList<>();
        outer.add(new ArrayList<>());

        int start;
        int end = 0;

        for(int i = 0; i < nums.length; i++){
            start = 0;
            end = outer.size() - 1;
            int n = outer.size();

            for(int j = start; j < n; j++){
                List<Integer> inner = new ArrayList<>(outer.get(j));
                inner.add(nums[i]);
                outer.add(inner);
            }
        }
        return outer;   
    }
}

//Recursive Approach
//TC: O(n.2^n)
//SC: O(n.2^n)
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backTrack(0, nums, new ArrayList<>(), res);
        return res;
    }

    private void backTrack(int index, int[] nums, List<Integer> curr, List<List<Integer>> res){
        res.add(new ArrayList<>(curr));
        for(int i = index; i < nums.length; i++){
            curr.add(nums[i]);
            backTrack(i + 1, nums, curr, res);
            curr.remove(curr.size() - 1);
        }
    }
}
