//TC: O(2^n . n)
//SC: O(n + 2^n . n)
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        findCombination(0, candidates, target, ans, new ArrayList<>());
        return ans;
    }

    private void findCombination(int index, int[] candidates, int target, List<List<Integer>> ans, List<Integer> list){
        if(target == 0){
            ans.add(new ArrayList<>(list));
            return;
        }

        for(int i = index; i < candidates.length; i++){
            if(i > index && candidates[i] == candidates[i - 1]) continue;

            if(candidates[i] > target) break;

            list.add(candidates[i]);
            findCombination(i + 1, candidates, target - candidates[i], ans, list);
            list.remove(list.size() - 1);
        }
    }
}
