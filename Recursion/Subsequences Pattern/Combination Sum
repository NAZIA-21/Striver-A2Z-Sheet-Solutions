//TC: O(2^n . n)
//SC: O(n + K*n)
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        findCombination(0, candidates, target, ans, new ArrayList<>());
        return ans;
    }

    private void findCombination(int index, int[] candidates, int target, List<List<Integer>> ans, List<Integer> list){
        if(index == candidates.length){
            if(target == 0){
                ans.add(new ArrayList<>(list));
            }
            return;
        }

        if(candidates[index] <= target){
            list.add(candidates[index]);
            findCombination(index, candidates, target - candidates[index], ans, list);
            list.remove(list.size() - 1);
        }

        findCombination(index + 1, candidates, target, ans, list);
    }
}
