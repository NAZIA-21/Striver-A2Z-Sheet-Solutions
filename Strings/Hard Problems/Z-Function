//Method 1:
//TC : O(l1 * l2)
//SC : O(l2)
class Solution {
    public int strStr(String haystack, String needle) {
      int l1= haystack.length();
      int l2= needle.length();

      if(l1< l2){
        return -1;
      }

      if(l2==0){
        return 0;
      }

      int threshold= l1-l2;
      for(int i=0; i<=threshold; i++){
        if(haystack.substring(i, i+l2).equals(needle)){
            return i;
        }
      }
      return -1;
    }
}

//Method 2:
//TC : O(l1 * l2)
//SC : O(1)
class Solution {
    public int strStr(String haystack, String needle) {
      if(needle.isEmpty()){
        return 0;
      }
      int l1= haystack.length();
      int l2= needle.length();

      int h= 0; //haystack pointer
      int n= 0; //needle pointer;

      while(h < l1){
        if(haystack.charAt(h) == needle.charAt(n)){
            if(l2 == 1){
                return h;
            }
            h++;
            n++;
        } else{
            h-= n-1;
            n=0;
        }
        if(n == l2){
            return h-n;
        }
      }

     return -1;
    }
}
