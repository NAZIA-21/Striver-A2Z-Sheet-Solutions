//Approach 1:
class Solution {
    public int longestOnes(int[] nums, int k) {
        int start = 0;
        int zeroCnt = 0;
        int maxLen = 0;

        for(int end = 0; end < nums.length; end++){
            if(nums[end] == 0) zeroCnt++;

            while(zeroCnt > k){
                if(nums[start] == 0){
                    zeroCnt--;
                }
                start++;
            }

            maxLen = Math.max(maxLen , end - start + 1);
        }
        return maxLen;
    }
}


//Approach 2:
class Solution {
    public int longestOnes(int[] nums, int k) {
        int start = 0;
        int window = 0;
        int ans = 0;

        for(int end = 0; end < nums.length; end++){
            window += nums[end];

            if(window + k < end - start + 1){
                window -= nums[start];
                start++;
            }

            ans = Math.max(ans , end - start + 1);
        }
        return ans;
    }
}
