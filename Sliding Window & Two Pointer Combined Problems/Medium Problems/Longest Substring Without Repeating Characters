//Approach 1:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set <Character> set= new HashSet<>();
        int maxLen = 0;
        int start = 0;

        for(int end = 0; end < s.length(); end++){
            char currChar = s.charAt(end);

            while(set.contains(currChar)){
                set.remove(s.charAt(start));
                start++;
            }
            set.add(currChar);
            maxLen= Math.max(maxLen , end - start +1);
        }
        return maxLen;
    }
}


//Approach 2:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int count[] = new int[128];
        int maxLen = 0;

        for(int left =0, right=0; right < s.length() ; right++){
            count[s.charAt(right)]++;

            while(count[s.charAt(right)] > 1){
                count[s.charAt(left++)]--;
            }

            maxLen = Math.max(maxLen , right - left + 1);
        }
        return maxLen;
  }
}
