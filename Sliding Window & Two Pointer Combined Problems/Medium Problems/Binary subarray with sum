//Approach 1: Sliding window 
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        return atMost(nums, goal) - atMost(nums, goal - 1);
    }

    private int atMost(int[] nums, int goal) {
        if (goal < 0) return 0;
        int start = 0, sum = 0, count = 0;
        
        for (int end = 0; end < nums.length; end++) {
            sum += nums[end];
            while (sum > goal) {
                sum -= nums[start++];
            }
            count += (end - start + 1);
        }
        return count;
    }
}

//Approach 2: PrefixSum
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int count = 0;
        int sum = 0;
        int[] prefixSum = new int[nums.length + 1];
        prefixSum[0] = 1; 

        for (int num : nums) {
            sum += num; 

            if (sum >= goal) {
                count += prefixSum[sum - goal];
            }

            prefixSum[sum]++;
        }

        return count;
    }
}
