//Method 1: Using HashMap
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> ans= new ArrayList<>();
        int n = nums.length;
        HashMap<Integer, Integer> map= new HashMap<>();
        
        for(int num : nums){
            if(map.containsKey(num)){
                if(map.get(num) == n/3){
                    ans.add(num);
                } 
                map.put(num , map.get(num) +1);
            } else{
                map.put(num , 1);
                if(map.get(num) > n/3){
                    ans.add(num);
                }
            }
        }

    return ans;   
    }
}


//Method 2: 
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int major1=0, major2=0;
        int count1=0, count2=0;
        int n= nums.length;
        List<Integer> ans = new ArrayList<>();

        //find two majority numbers 
        for(int num : nums){
            if(num == major1){
                count1++;
            } else if(num == major2){
                count2++;
            } else if(count1 == 0){
                major1 = num;
                count1 = 1;
            } else if(count2 ==0){
                major2 = num;
                count2 = 1;
            } else{
                count1--;
                count2--;
            }
        }

        //validation
        count1=0;
        count2=0;
        for(int num : nums){
            if(num == major1){
                count1++;
            } else if(num == major2){
                count2++;
            }
        }

        if(count1> n/3){
            ans.add(major1);
        }
        if(count2> n/3){
            ans.add(major2);
        } 
        return ans;
    }
}
