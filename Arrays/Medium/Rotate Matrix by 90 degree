//Rotate Image by 90 degree

//Approach 1: 4-way swapping
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;

        //outer ring
        for(int i=0; i< (n+1)/2 ; i++){
            for(int j=0; j < n/2 ; j++){
                //4-way swapp
                //temp= top left
                int temp = matrix[i][j];

                //top- left = top-right
                matrix[i][j] = matrix[n-1-j][i];

                //top-right = bottom-right
                matrix[n-1-j][i] = matrix[n-1-i][n-1-j];

                //bottom-right = bottom-left
                matrix[n-1-i][n-1-j] = matrix[j][n-1-i];
                
                //bottom-left = top-left
                matrix[j][n-1-i] = temp;
            }
        }

    }
}


//Approach 2:
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;

        // step 1 : transpose of matrix
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                // swapp non-diagonal elements
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // step 2 : reverse each row
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n - 1 - j];
                matrix[i][n - 1 - j] = temp;
            }
        }

    }
}
